class StackOverflowTest
instance variables
	s : StackOverflow := new StackOverflow();
	
operations
	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
	private assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
  			IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
		)
	post expected = actual;
	
	private testcreateStackOverflow: () ==> ()
	testcreateStackOverflow() == (
	dcl guest : GuestUser := s.getCurrentUser();
		assertTrue(isofclass(GuestUser,guest));
		assertTrue(guest.getName() = "");
		assertTrue(guest.getEmail() = "");
		assertTrue(guest.getAge() = 1);
		assertTrue(guest.getSex() = <Masculino>);
		assertTrue(guest.getUsername() = "");
		assertTrue(guest.getPassword() = "");
		
		guest := guest.editUser("Mario","mario.gustavo@hotmail.com", 23, <Masculino>);
		assertTrue(guest.getName() = "");
		assertTrue(guest.getEmail() = "");
		assertTrue(guest.getAge() = 1);
		assertTrue(guest.getSex() = <Masculino>);
		assertTrue(guest.getUsername() = "");
		assertTrue(guest.getPassword() = "");
	);
	
	
	private testCreateRegisteredUser: () ==> ()
	testCreateRegisteredUser() == (
		dcl newUser:RegisteredUser := new RegisteredUser(1,"Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		assertTrue(newUser.getCanRate() = false);
		assertTrue(newUser.getCanCreatePost() = false );
		assertTrue(newUser.getCanEditPost() = false );
		assertTrue(newUser.getCanRemovePost() = false );
		assertTrue(newUser.getCanAddComment() = false );
		assertTrue(newUser.getCanEditComment() = false );
		assertTrue(newUser.getCanRemoveComment() = false );
		assertTrue(newUser.getCanBanUsers() = false );
		assertTrue(newUser.getCanUnbanUsers() = false );
		assertTrue(newUser.getName() = "Mario");
		assertTrue(newUser.getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(newUser.getAge() = 23);
		assertTrue(newUser.getSex() = <Masculino>);
		assertTrue(newUser.getReputation() = 0);
		assertTrue(newUser.getBanState() = <Unbanned>);
		assertTrue(newUser.getId() = 1);
		assertEqual(newUser.getPosts(), {});
		assertTrue(newUser.getUsername() = "mario");
		assertTrue(newUser.getPassword() = "12345");
	
	);
	
		private testCreateRegularUser: () ==> ()
	testCreateRegularUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		assertTrue(newUser.getCanRate() = true);
		assertTrue(newUser.getCanCreatePost() = true );
		assertTrue(newUser.getCanEditPost() = true );
		assertTrue(newUser.getCanRemovePost() = false );
		assertTrue(newUser.getCanAddComment() = true );
		assertTrue(newUser.getCanEditComment() = true );
		assertTrue(newUser.getCanRemoveComment() = false );
		assertTrue(newUser.getCanBanUsers() = false );
		assertTrue(newUser.getCanUnbanUsers() = false );
		assertTrue(newUser.getName() = "Mario");
		assertTrue(newUser.getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(newUser.getAge() = 23);
		assertTrue(newUser.getSex() = <Masculino>);
		assertTrue(newUser.getReputation() = 0);
		assertTrue(newUser.getBanState() = <Unbanned>);
		assertTrue(newUser.getId() = 1);
		assertEqual(newUser.getPosts(), {});
		assertTrue(newUser.getUsername() = "mario");
		assertTrue(newUser.getPassword() = "12345");
	);
	
			private testCreateAdministratorUser: () ==> ()
	testCreateAdministratorUser() ==
	(
		dcl newUser:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		assertTrue(newUser.getCanRate() = true);
		assertTrue(newUser.getCanCreatePost() = true );
		assertTrue(newUser.getCanEditPost() = true );
		assertTrue(newUser.getCanRemovePost() = true );
		assertTrue(newUser.getCanAddComment() = true );
		assertTrue(newUser.getCanEditComment() = true );
		assertTrue(newUser.getCanRemoveComment() = true );
		assertTrue(newUser.getCanBanUsers() = true );
		assertTrue(newUser.getCanUnbanUsers() = true );
		assertTrue(newUser.getName() = "Mario");
		assertTrue(newUser.getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(newUser.getAge() = 23);
		assertTrue(newUser.getSex() = <Masculino>);
		assertTrue(newUser.getReputation() = 0);
		assertTrue(newUser.getBanState() = <Unbanned>);
	);
	
	private testBanUser: () ==> ()
	testBanUser() ==
	(
		dcl newUser:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		dcl newUser2:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		dcl newUser3:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		assertTrue(newUser2.getBanState() = <Unbanned>);
		assertTrue(newUser3.getBanState() = <Unbanned>);
		newUser.banUser(newUser2);
		newUser.banUser(newUser3);
		assertTrue(newUser2.getBanState() = <Banned>);
		assertTrue(newUser3.getBanState() = <Banned>);
		newUser.unbanUser(newUser2);
		newUser.unbanUser(newUser3);
		assertTrue(newUser2.getBanState() = <Unbanned>);
		assertTrue(newUser3.getBanState() = <Unbanned>);
	);
	
	private testAddUser: () ==> ()
	testAddUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0, "mario","12345" );
		dcl usersLength:nat := card s.getUsers();
		s.addUser(newUser);
		assertTrue(usersLength + 1 = card s.getUsers());
		assertTrue(newUser in set s.getUsers());
	);
	
	private testAddPost: () ==> ()
	testAddPost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl postsLength:nat := card s.getPosts();
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);		
		
		assertTrue(postsLength + 1 = card s.getPosts());
		assertTrue(newPost in set s.getPosts());
		assertTrue(newPost in set user.getPosts());
		assertEqual(newPost.getAuthor(), user);
		assertEqual(newPost.getDate().day, 29);
		assertEqual(newPost.getDate().month, 12);
		assertEqual(newPost.getDate().year, 2017);
		assertEqual(newPost.getViews(), 0);
		assertEqual(newPost.getRating(), 0);
	);
	
	private testEditPost: () ==> ()
	testEditPost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);			
		dcl title:Utils`String := newPost.getTitle();
		dcl tags:set of Utils`String := newPost.getTagsList();
		
		newPost := s.editPost(newPost, title, "New content", tags);
		
		assertTrue(newPost.getTitle() = "Title");
		assertTrue(newPost.getContent() = "New content");
		assertEqual(newPost.getAuthor(), user);
		assertEqual(newPost.getTagsList(), {"Tag1", "Tag2", "Tag3"});
		assertEqual(newPost.getDate().day, 29);
		assertEqual(newPost.getDate().month, 12);
		assertEqual(newPost.getDate().year, 2017);
	);

	private testRating: () ==> ()
	testRating() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);
		dcl newComment:Comment := s.addComment(newPost, "Content", user, 29,12,2017);	
		
		assertEqual(newPost.getRating(), 0);
		assertEqual(newComment.getRating(), 0);
		assertEqual(user.getReputation(),0);
		newPost.increaseRating();
		newComment.increaseRating();
		assertEqual(newPost.getRating(),1);
		assertEqual(newComment.getRating(), 1);
		assertEqual(user.getReputation(),4);
		newPost.decreaseRating();
		newPost.decreaseRating();
		newComment.decreaseRating();
		newComment.decreaseRating();
		assertEqual(newPost.getRating(),-1);
		assertEqual(newComment.getRating(), -1);
		assertEqual(user.getReputation(),-2);
		
		
	);

	private testRemovePost: () ==> ()
	testRemovePost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);	
		dcl postsLength:nat := card s.getPosts();	
		s.deletePost(newPost);
		
		assertTrue(postsLength - 1 = card s.getPosts());
		assertTrue(newPost not in set s.getPosts());
		assertTrue(newPost not in set newPost.getAuthor().getPosts());
	);
	
	private testAddComment: () ==> ()
	testAddComment() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);		
		dcl newComment:Comment := s.addComment(newPost, "Content", user, 29,12,2017);
		
		assertTrue(newComment in set newPost.getCommentsList());
		assertTrue(newComment in set user.getComments());
		assertEqual(newComment.getContent(), "Content");
		assertEqual(newComment.getDate().day, 29);
		assertEqual(newComment.getDate().month, 12);
		assertEqual(newComment.getDate().year, 2017);
	);
	
	private testEditComment: () ==> ()
	testEditComment() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);		
		dcl newComment:Comment := s.addComment(newPost, "Content", user, 29,12,2017);
		
		newComment := s.editComment(newComment, "New Content");
		
		assertTrue(newComment in set newPost.getCommentsList());
		assertTrue(newComment in set user.getComments());
		assertEqual(newComment.getContent(), "New Content");
		assertEqual(newComment.getDate().day, 29);
		assertEqual(newComment.getDate().month, 12);
		assertEqual(newComment.getDate().year, 2017);
	);
	
	private testRemoveComment: () ==> ()
	testRemoveComment() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);		
		dcl newComment:Comment := s.addComment(newPost, "Content", user, 29,12,2017);
		
		s.deleteComment(newPost, newComment);
		
		assertTrue(newComment not in set newPost.getCommentsList());
		assertTrue(newComment not in set user.getComments());
	);
		private testSearchUser: () ==> ()
	testSearchUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Rafael", "mario.gustavo@hotmail.com", 27, <Masculino>, 0, "mario","12345" );
		s.addUser(newUser);
		assertEqual(s.searchUsersByName("Rafael"), {newUser});
		assertEqual(s.searchUsersByAge(27), {newUser});
	);
	
			private testLogin: () ==> ()
	testLogin() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Jorge", "mario.gustavo@hotmail.com", 27, <Masculino>, 0, "jj","12345" );
		dcl tempBool : bool := false;
		
		s.addUser(newUser);
		tempBool := s.tryLogin("j","12345");
		assertTrue(tempBool = false);
		tempBool := s.tryLogin("jj","12345");
		assertTrue(tempBool);
		assertEqual(newUser,s.getCurrentUser());
	);
	
			private testSearchPost: () ==> ()
	testSearchPost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl tagsList2:set of Utils`String := {"Tag3"};
		dcl newPost:Post := s.createPost("Title4", "Content", user, tagsList, 29, 12, 2017);
		dcl newPost2:Post := s.createPost("teste para Title7 meio", "Content", user, tagsList2, 29, 12, 2017);
		
		assertEqual(s.searchPostsByTags("Tag1"),{newPost});
		assertEqual(s.searchPostsByTags("Tag3"),{newPost, newPost2});
		assertEqual(s.searchPostsByTitle("Title7"),{newPost2});
	);
	
				private testEditUser: () ==> ()
	testEditUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Ana", "ana@hotmail.com", 27, <Feminino>, 0, "aa","12345" );
		dcl tempBool : bool;
		s.addUser(newUser);
		tempBool := s.tryLogin("aa","12345");
		s.editUser("Mario","mario.gustavo@hotmail.com", 23, <Masculino>);
		assertTrue(s.getCurrentUser().getName() = "Mario");
		assertTrue(s.getCurrentUser().getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(s.getCurrentUser().getAge() = 23);
		assertTrue(s.getCurrentUser().getSex() = <Masculino>);
		s.editUser("Ana", "ana@hotmail.com", 27, <Feminino>);
		assertTrue(s.getCurrentUser().getName() = "Ana");
		assertTrue(s.getCurrentUser().getEmail() = "ana@hotmail.com");
		assertTrue(s.getCurrentUser().getAge() = 27);
		assertTrue(s.getCurrentUser().getSex() = <Feminino>);
	);

			private testOrderPosts: () ==> ()
	testOrderPosts() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0, "mario","12345");
		dcl tagsList:set of Utils`String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList, 01, 01, 2015);
		dcl newPost2:Post := s.createPost("Title", "Content", user, tagsList, 29, 12, 2017);
		dcl newPost3:Post := s.createPost("Title2", "Content2", user, tagsList, 27, 05, 2017);
		dcl newPost4:Post := s.createPost("Title", "Content", user, tagsList, 31, 03, 2016);
		dcl newPost5:Post := s.createPost("Title", "Content", user, tagsList, 01, 12, 2017);
		dcl newPost6:Post := s.createPost("Title", "Content", user, tagsList, 27, 05, 2017);
		
		newPost2.increaseRating();
		newPost2.increaseRating();
		newPost3.increaseRating();
		newPost4.decreaseRating();
		newPost5.increaseRating();
		newPost5.increaseRating();
		newPost6.decreaseRating();
		
		assertEqual(s.getPosts(),{newPost,newPost2,newPost3,newPost4,newPost5,newPost6});
		
		assertEqual(s.orderPostsByDate(s.getPosts()),{newPost2, newPost5, newPost3, newPost6, newPost4,newPost});
		assertEqual(s.orderPostsByRating(s.getPosts()),{newPost4,newPost6,newPost,newPost3,newPost2,newPost5});
	);
	

	
	public static main: () ==> ()
	main() ==
	(	
		new StackOverflowTest().testcreateStackOverflow();
	  new StackOverflowTest().testCreateRegisteredUser();
		new StackOverflowTest().testCreateRegularUser();
		new StackOverflowTest().testCreateAdministratorUser();
		new StackOverflowTest().testBanUser();
		new StackOverflowTest().testAddUser();
		new StackOverflowTest().testAddPost();	
		new StackOverflowTest().testEditPost();
		new StackOverflowTest().testRemovePost();
		new StackOverflowTest().testSearchUser();
		new StackOverflowTest().testLogin();
		new StackOverflowTest().testAddComment();	
		new StackOverflowTest().testEditComment();	
		new StackOverflowTest().testRemoveComment();
		new StackOverflowTest().testRating();	
		new StackOverflowTest().testSearchPost();
		new StackOverflowTest().testEditUser();
		new StackOverflowTest().testOrderPosts();
	)
	
end StackOverflowTest