class StackOverflowTest
types
public String = seq of char;
public Sex = <Masculino> | <Feminino>;
public BanState = <Banned> | <Unbanned>;
values
-- TODO Define values here
instance variables
	s : StackOverflow := new StackOverflow();
	
operations
	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
		private testCreateRegularUser: () ==> ()
	testCreateRegularUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		assertTrue(newUser.getCanRate() = true);
		assertTrue(newUser.getCanCreatePost() = true );
		assertTrue(newUser.getCanEditPost() = true );
		assertTrue(newUser.getCanRemovePost() = false );
		assertTrue(newUser.getCanAddComment() = true );
		assertTrue(newUser.getCanEditComment() = true );
		assertTrue(newUser.getCanRemoveComment() = false );
		assertTrue(newUser.getCanBanUsers() = false );
		assertTrue(newUser.getCanUnbanUsers() = false );
		assertTrue(newUser.getName() = "Mario");
		assertTrue(newUser.getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(newUser.getAge() = 23);
		assertTrue(newUser.getSex() = <Masculino>);
		assertTrue(newUser.getReputation() = 0);
		assertTrue(newUser.getBanState() = <Unbanned>);
	);
	
			private testCreateAdministratorUser: () ==> ()
	testCreateAdministratorUser() ==
	(
		dcl newUser:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		assertTrue(newUser.getCanRate() = true);
		assertTrue(newUser.getCanCreatePost() = true );
		assertTrue(newUser.getCanEditPost() = true );
		assertTrue(newUser.getCanRemovePost() = true );
		assertTrue(newUser.getCanAddComment() = true );
		assertTrue(newUser.getCanEditComment() = true );
		assertTrue(newUser.getCanRemoveComment() = true );
		assertTrue(newUser.getCanBanUsers() = true );
		assertTrue(newUser.getCanUnbanUsers() = true );
		assertTrue(newUser.getName() = "Mario");
		assertTrue(newUser.getEmail() = "mario.gustavo@hotmail.com");
		assertTrue(newUser.getAge() = 23);
		assertTrue(newUser.getSex() = <Masculino>);
		assertTrue(newUser.getReputation() = 0);
		assertTrue(newUser.getBanState() = <Unbanned>);
	);
	
	private testBanUser: () ==> ()
	testBanUser() ==
	(
		dcl newUser:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		dcl newUser2:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		dcl newUser3:AdministratorUser := s.createAdministratorUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		assertTrue(newUser2.getBanState() = <Unbanned>);
		assertTrue(newUser3.getBanState() = <Unbanned>);
		newUser.banUser(newUser2);
		newUser.banUser(newUser3);
		assertTrue(newUser2.getBanState() = <Banned>);
		assertTrue(newUser3.getBanState() = <Banned>);
	);
	
	private testAddUser: () ==> ()
	testAddUser() ==
	(
		dcl newUser:RegularUser := s.createRegularUser("Mario", "mario.gustavo@hotmail.com", 23, <Masculino>, 0 );
		dcl usersLength:nat := card s.getUsers();
		s.addUser(newUser);
		assertTrue(usersLength + 1 = card s.getUsers());
		assertTrue(newUser in set s.getUsers());
	);
	
	private testAddPost: () ==> ()
	testAddPost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0);
		dcl tagsList:set of String := {"Tag1", "Tag2", "Tag3"};
		dcl postsLength:nat := card s.getPosts();
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList);		
		
		assertTrue(postsLength + 1 = card s.getPosts());
		assertTrue(newPost in set s.getPosts());
		assertTrue(newPost in set newPost.getAuthor().getPosts());
	);
	
	private testEditPost: () ==> ()
	testEditPost() ==
	(
		dcl user:RegularUser := new RegularUser(1, "User", "email@gmail.com", 47, <Feminino>, 0);
		dcl tagsList:set of String := {"Tag1", "Tag2", "Tag3"};
		dcl newPost:Post := s.createPost("Title", "Content", user, tagsList);			
		dcl title:String := newPost.getTitle();
		dcl tags:set of String := newPost.getTagsList();
		
		newPost := s.editPost(newPost, title, "New content", tags);
		
		assertTrue(newPost.getTitle() = "Title");
		assertTrue(newPost.getContent() = "New content");
		assertTrue(newPost.getTagsList() = {"Tag1", "Tag2", "Tag3"});
	);
	
	public static main: () ==> ()
	main() ==
	(
		dcl stack:StackOverflowTest := new StackOverflowTest(); 
		
		stack.testCreateRegularUser();
		stack.testCreateAdministratorUser();
		stack.testBanUser();
		stack.testAddUser();
		stack.testAddPost();	
	)
	
end StackOverflowTest