class StackOverflow
types
public String = seq of char;
public Sex = <Masculino> | <Feminino>;

instance variables
	private userIdCounter : nat := 1;
	private users : set of User;
	private postsList : set of Post;
	private currentUser : User;
	
operations
	public StackOverflow: () ==> StackOverflow
		StackOverflow() == (
			currentUser := new GuestUser();
			users := {};
			postsList := {};
			return self;
		)
		post users = {} and userIdCounter = 1 and postsList = {};
		
	public createRegularUser: String * String * nat * Sex * nat * String * String ==> RegularUser
		createRegularUser(name, email, age, sex, reputation, username, password) == (
			return new RegularUser(userIdCounter, name, email, age, sex, reputation, username, password);
		);
		
	public createAdministratorUser: String * String * nat * Sex * nat * String * String ==> AdministratorUser
		createAdministratorUser(name, email, age, sex, reputation, username, password) == (
			return new AdministratorUser(userIdCounter, name, email, age, sex, reputation, username, password);
		);
	
	public addUser: User ==> ()
		addUser(user) == (
			users := {user} union users;
			userIdCounter := userIdCounter + 1;
		) 
		pre user not in set users
		post userIdCounter > 1 and user in set users;
		
	public createPost: String * String * RegisteredUser * set of String * nat1 * nat1 * nat1 ==> Post
		createPost(title, content, author, tagsList, day, month, year) == (
			dcl newPost:Post := author.createPost(title, content, tagsList, day, month, year);
			addPost(newPost);
			return newPost;
		);
		
	public editPost: Post * String * String * set of String ==> Post
		editPost(question, newTitle, newContent, newTags) == (
			dcl author:RegisteredUser := question.getAuthor();
			return author.editPost(question, newTitle, newContent, newTags);
		);

	public deletePost:Post ==> ()
		deletePost(question) == (
			dcl author:RegisteredUser := question.getAuthor();
			author.removePost(question);
			removePost(question);
		);	
		
	public addComment:Post * String * RegisteredUser * nat1 * nat1 * nat1 ==> Comment
		addComment(question, content, author, day, month, year) == (
			return author.createComment(question, content, day, month, year);
		);
	
	public editComment: Comment * String ==> Comment
		editComment(comment, newContent) == (
			dcl author:RegisteredUser := comment.getAuthor();
			return author.editComment(comment, newContent);
		);
	
	public deleteComment:Post * Comment ==> ()
		deleteComment(question, comment) == (
			dcl author:RegisteredUser := comment.getAuthor();
			author.removeComment(question, comment);
		);	
	
	public addPost: Post ==> ()
		addPost(question) == (
			postsList := {question} union postsList;
		) 
		pre question not in set postsList
		post question in set postsList;
	
	public removePost: Post ==> ()
		removePost(question) == (
			postsList := {question} \ postsList;
		) 
		pre question in set postsList
		post question not in set postsList;
	
	public getUsers: () ==> set of User
	getUsers() == return users
	post RESULT = users;
	
	public getPosts: () ==> set of Post
	getPosts() == return postsList
	post RESULT = postsList;
	
	public getCurrentUser: () ==> User
	getCurrentUser() == return currentUser
	post RESULT = currentUser;
	
	public searchUsersByName:String ==> set of User
	searchUsersByName(inputName) == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getName() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName <> "";
	
		public searchUsersByAge:nat ==> set of User
		searchUsersByAge(inputName) == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getAge() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName > 0;
	
				public searchPostsByTitle:String ==> set of Post
				searchPostsByTitle(inputTitle) == (
	dcl postsTemp : set of Post := {};
	dcl inputSize : int := len inputTitle;
	dcl counter : nat := 1;
	dcl counter2 : nat := 1;
	dcl flagFound : bool := false;
	
	for all currPost in set postsList do (
	flagFound := false;
	counter2 := 1;
	
			while (counter < len currPost.getTitle()  ) do (	
				if(currPost.getTitle()(counter) = inputTitle(counter2) and flagFound = false) then
				(
					
					if(counter2 = inputSize) then
					(
						postsTemp := postsTemp union {currPost};
						flagFound := true;
					) else (
					counter2 := counter2 + 1;
					);
				) 
				else 
				(
				counter2 := 1;
				);
				counter := counter + 1;
			);
	);
	return postsTemp;
	)
	pre inputTitle <> "";
	
			public searchPostsByTags:String ==> set of Post
			searchPostsByTags(inputTag) == (
	dcl postsTemp : set of Post := {};
	for all currPost in set postsList do (
	let tagList = currPost.getTagsList() in (
	if(inputTag in set tagList) then 
	postsTemp := postsTemp union {currPost};
	 )
	);
	return postsTemp;
	)
	pre inputTag <> "";
	
	
	public editUser:String * String * nat * Sex ==> ()
	editUser(name,email,age,sex) == (
	currentUser := currentUser.editUser(name,email,age,sex);
	) pre name <> "" and email <> "" and age > 0 and sex <> nil;
	
	
			public tryLogin:String * String ==> bool
			tryLogin(inputUsername,inputPassword) == (
	for all currUser in set users do (
		if currUser.getUsername() = inputUsername and currUser.getPassword() = inputPassword then( 
			currentUser := currUser;
			return true);
		);
		return false;
	)
	pre inputUsername <> "" and inputPassword <> "";
	
 public orderPostsByDate:set of Post ==> set of Post
 orderPostsByDate(posts) == ( 
    dcl tempPosts : set of Post := {};
    dcl currentDate : Utils`Date;
    dcl tempDate : Utils`Date;
    dcl tempPost : Post;
    for all currPost in set posts do (
        currentDate := currPost.getDate(); 
        tempDate := currentDate;
        tempPost := currPost;
        for all currPost2 in set posts do (
                 if(currPost2 not in set tempPosts) then (
                        if(Utils`compareDates(currPost2.getDate(),currentDate) and Utils`compareDates(currPost2.getDate(), tempDate)) then (
                            tempPost := currPost2;
                            tempDate := currPost2.getDate();
                        );
                 );
             tempPosts := tempPosts union {tempPost};
            );
    );
    return tempPosts;
  ) pre card posts > 0
    post card posts = card RESULT;
    
    public orderPostsByRating: set of Post ==> set of Post
    orderPostsByRating(posts) == ( 
    dcl tempPosts : set of Post := {};
    dcl currentRating : int;
    dcl tempRating : int;
    dcl tempPost : Post;
    for all currPost in set posts do (
        currentRating := currPost.getRating();
        tempRating := currentRating;
        tempPost := currPost;
        for all currPost2 in set posts do (
                 if(currPost2 not in set tempPosts) then (
                        if(currPost2.getRating() > currentRating and currPost2.getRating() > tempRating) then (
                            tempPost := currPost2;
                            tempRating := currPost2.getRating();
                        );
                 );
             tempPosts := tempPosts union {tempPost};
            );
    );
    return tempPosts;
  ) pre card posts > 0
    post card posts = card RESULT; 
	
end StackOverflow