class StackOverflow
types
public String = seq of char;
public Sex = <Masculino> | <Feminino>;
instance variables
	private userIdCounter : nat := 1;
	private users : set of User;
	private postsList : set of Post;
	private currentUser : User;
operations
	public StackOverflow() res:StackOverflow == (
	currentUser := new GuestUser();
	users := {};
	postsList := {};
	)
	post res.users = {} and res.userIdCounter = 1 and res.postsList = {};
	
	public createRegularUser(name:String, email:String, age:nat, sex:Sex, reputation:nat, username:String, password:String) res:RegularUser == (
	return new RegularUser(userIdCounter, name, email, age, sex, reputation, username, password);
	);
	
		public createAdministratorUser(name:String, email:String, age:nat, sex:Sex, reputation:nat, username:String, password:String) res:AdministratorUser == (
	return new AdministratorUser(userIdCounter, name, email, age, sex, reputation, username, password);
	);
	
	public addUser(user:User) == (
	users := {user} union users;
	userIdCounter := userIdCounter + 1;
	);
	
	public createPost(title:String, content:String, author:RegisteredUser, tagsList:set of String, day: nat1, month: nat1, year: nat1) res:Post == (
		dcl newPost:Post := author.createPost(title, content, tagsList, day, month, year);
		addPost(newPost);
		return newPost;
	);
	
	public editPost(question:Post, newTitle:String, newContent:String, newTags:set of String) res:Post == (
		dcl author:RegisteredUser := question.getAuthor();
		return author.editPost(question, newTitle, newContent, newTags);
	);
	
	public deletePost(question:Post) == (
		dcl author:RegisteredUser := question.getAuthor();
		author.removePost(question);
		removePost(question);
	);	
	
	public addComment(question:Post, content:String, author:RegisteredUser, day: nat1, month: nat1, year: nat1) res:Comment == (
		dcl newComment:Comment := author.createComment(question, content, day, month, year);
		return newComment;
	);
	
	public editComment(comment:Comment, newContent:String) res:Comment == (
		dcl author:RegisteredUser := comment.getAuthor();
		return author.editComment(comment, newContent);
	);
	
	public deleteComment(question:Post, comment:Comment) == (
		dcl author:RegisteredUser := comment.getAuthor();
		author.removeComment(question, comment);
	);	
	
	public addPost(question:Post) == (
		postsList := {question} union postsList;
	);
	
	public removePost(question:Post) == (
		postsList := {question} \ postsList;
	);
	
	public getUsers: () ==> set of User
	getUsers() == return users
	post RESULT = users;
	
	public getPosts: () ==> set of Post
	getPosts() == return postsList
	post RESULT = postsList;
	
	public getCurrentUser: () ==> User
	getCurrentUser() == return currentUser
	post RESULT = currentUser;
	
	public searchUsersByName(inputName:String) res:set of User == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getName() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName <> "";
	
		public searchUsersByAge(inputName:nat) res:set of User == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getAge() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName > 0;
	
			public tryLogin(inputUsername:String, inputPassword:String) res:bool == (
	for all currUser in set users do (
		if currUser.getUsername() = inputUsername and currUser.getPassword() = inputPassword then( 
			currentUser := currUser;
			return true);
		);
		return false;
	)
	pre inputUsername <> "" and inputPassword <> "";
	
end StackOverflow