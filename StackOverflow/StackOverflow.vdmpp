class StackOverflow
types
public String = seq of char;
public Sex = <Masculino> | <Feminino>;
values
-- TODO Define values here
instance variables
	private static userIdCounter : nat := 1;
	private users : set of User;
	private postsList : set of Post;
operations
	public StackOverflow() res:StackOverflow == (
	users := {};
	postsList := {};
	)
	post res.users = {} and res.userIdCounter = 1 and res.postsList = {};
	
	public createRegularUser(name:String, email:String, age:nat, sex:Sex, reputation:nat) res:RegularUser == (
	return new RegularUser(userIdCounter, name, email, age, sex, reputation);
	);
	
		public createAdministratorUser(name:String, email:String, age:nat, sex:Sex, reputation:nat) res:AdministratorUser == (
	return new AdministratorUser(userIdCounter, name, email, age, sex, reputation);
	);
	
	public addUser(user:User) == (
	users := {user} union users;
	userIdCounter := userIdCounter + 1;
	);
	
	public createPost(title:String, content:String, author:RegisteredUser, tagsList:set of String) res:Post == (
		dcl newPost:Post := author.createPost(title, content, tagsList);
		addPost(newPost);
		return newPost;
	);
	
	public editPost(question:Post, newTitle:String, newContent:String, newTags:set of String) res:Post == (
		dcl author:RegisteredUser := question.getAuthor();
		return author.editPost(question, newTitle, newContent, newTags);
	);
	
	public deletePost(question:Post) == (
		dcl author:RegisteredUser := question.getAuthor();
		author.removePost(question);
	);	
	
	public addPost(question:Post) == (
		postsList := {question} union postsList;
	);
	
	public getUsers: () ==> set of User
	getUsers() == return users
	post RESULT = users;
	
	public getPosts: () ==> set of Post
	getPosts() == return postsList
	post RESULT = postsList;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end StackOverflow