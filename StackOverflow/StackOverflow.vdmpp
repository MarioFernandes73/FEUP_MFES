class StackOverflow
types
public String = seq of char;
public Sex = <Masculino> | <Feminino>;
instance variables
	private userIdCounter : nat := 1;
	private users : set of User;
	private postsList : set of Post;
	private currentUser : User;
operations
	public StackOverflow() res:StackOverflow == (
	currentUser := new GuestUser();
	users := {};
	postsList := {};
	)
	post res.users = {} and res.userIdCounter = 1 and res.postsList = {};
	
	public createRegularUser(name:String, email:String, age:nat, sex:Sex, reputation:nat) res:RegularUser == (
	return new RegularUser(userIdCounter, name, email, age, sex, reputation);
	);
	
		public createAdministratorUser(name:String, email:String, age:nat, sex:Sex, reputation:nat) res:AdministratorUser == (
	return new AdministratorUser(userIdCounter, name, email, age, sex, reputation);
	);
	
	public addUser(user:User) == (
	users := {user} union users;
	userIdCounter := userIdCounter + 1;
	);
	
	public createPost(title:String, content:String, authour:User, tagsList:seq of String) res:Post == (
		return new Post(title, content, authour, tagsList);
	);
	
	public addPost(question:Post) == (
		postsList := {question} union postsList;
	);
	
	public getUsers: () ==> set of User
	getUsers() == return users
	post RESULT = users;
	
	public getPosts: () ==> set of Post
	getPosts() == return postsList
	post RESULT = postsList;
	
	public searchUsersByName(inputName:String) res:set of User == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getName() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName <> "";
	
		public searchUsersByAge(inputName:nat) res:set of User == (
	dcl usersTemp : set of User := {};
	for all currUser in set users do (
		if currUser.getAge() = inputName then 
			usersTemp := {currUser} union usersTemp;
		);
	return usersTemp;
	)
	pre inputName > 0;
	
end StackOverflow